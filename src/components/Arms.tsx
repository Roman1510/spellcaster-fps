/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Drillimpact (https://sketchfab.com/Drillimpact)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/psx-first-person-arms-efd731f559a14ab48e29c8a200d71788
Title: PSX First Person Arms
*/

import { useEffect, useRef, useState } from 'react'
import { useAnimations, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { Bone, Group, MeshStandardMaterial, SkinnedMesh } from 'three'

type GLTFResult = GLTF & {
  nodes: {
    Object_58: SkinnedMesh
    _rootJoint: Bone
  }
  materials: {
    arms: MeshStandardMaterial
  }
}

export function Arms(props: JSX.IntrinsicElements['group']) {
  const group = useRef<Group>(null)
  const { nodes, materials, animations } = useGLTF(
    '/psx_first_person_arms.glb'
  ) as GLTFResult
  const { actions } = useAnimations(animations, group)

  // Track mouse state
  const [isMagicActive, setIsMagicActive] = useState(false)

  useEffect(() => {
    if (!group.current) return

    const idleAction = actions['arms_armature|Relax_hands_idle_loop']
    const magicSpellAction = actions['arms_armature|Magic_spell_loop']

    if (!idleAction || !magicSpellAction) {
      console.error('One or more required animations are missing.')
      return
    }

    // Set initial animation
    idleAction.play()
    // magicSpellAction.play().paused = true // Start paused

    // Function to handle animation transitions
    const handleAnimationTransition = () => {
      if (isMagicActive) {
        if (idleAction.isRunning()) {
          idleAction.fadeOut(0.01) // Fade out idle animation
        }
        magicSpellAction.reset().fadeIn(0.001).play() // Play magic spell animation
      } else {
        if (magicSpellAction.isRunning()) {
          magicSpellAction.fadeOut(0.01) // Fade out magic spell animation
        }
        idleAction.reset().play() // Play idle animation
      }
    }

    // Watch for changes in mouse state
    handleAnimationTransition()
  }, [actions, isMagicActive])

  // Handle mouse down and up events
  useEffect(() => {
    const handleMouseDown = (event: MouseEvent) => {
      if (event.button === 0) {
        // Left mouse button
        setIsMagicActive(true)
      }
    }

    const handleMouseUp = (event: MouseEvent) => {
      if (event.button === 0) {
        // Left mouse button
        setIsMagicActive(false)
      }
    }

    window.addEventListener('mousedown', handleMouseDown)
    window.addEventListener('mouseup', handleMouseUp)

    return () => {
      window.removeEventListener('mousedown', handleMouseDown)
      window.removeEventListener('mouseup', handleMouseUp)
    }
  }, [])

  return (
    <group ref={group} {...props} dispose={null}>
      <group
        name="Sketchfab_Scene"
        rotation={[0, Math.PI, 0]}
        scale={[0.24, 0.24, 0.24]}
        position={[0, -1.22, 0]}
      >
        <group
          name="Sketchfab_model"
          rotation={[-Math.PI / 2, 0, 0]}
          scale={2.95}
        >
          <group
            name="PSX_First_Person_Armsfbx"
            rotation={[Math.PI / 2, 0, 0]}
            scale={0.01}
          >
            <group name="Object_2">
              <group name="RootNode">
                <group
                  name="arms_armature"
                  rotation={[-Math.PI / 2, 0, 0]}
                  scale={100}
                >
                  <group name="Object_5">
                    <primitive object={nodes._rootJoint} />
                    <skinnedMesh
                      name="Object_58"
                      geometry={nodes.Object_58.geometry}
                      material={materials.arms}
                      skeleton={nodes.Object_58.skeleton}
                    />
                    <group name="Object_57" />
                  </group>
                </group>
                <group name="arms" />
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/psx_first_person_arms.glb')
